package tw.skyarrow.ehreader.model;

import tw.skyarrow.ehreader.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DOWNLOAD.
 */
public class Download extends DownloadBase  {

    private Long id;
    private Integer status;
    private Integer progress;
    private java.util.Date created;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DownloadDao myDao;

    private Gallery gallery;
    private Long gallery__resolvedKey;


    public Download() {
    }

    public Download(Long id) {
        this.id = id;
    }

    public Download(Long id, Integer status, Integer progress, java.util.Date created) {
        this.id = id;
        this.status = status;
        this.progress = progress;
        this.created = created;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDownloadDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Integer getProgress() {
        return progress;
    }

    public void setProgress(Integer progress) {
        this.progress = progress;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    /** To-one relationship, resolved on first access. */
    public Gallery getGallery() {
        Long __key = this.id;
        if (gallery__resolvedKey == null || !gallery__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GalleryDao targetDao = daoSession.getGalleryDao();
            Gallery galleryNew = targetDao.load(__key);
            synchronized (this) {
                gallery = galleryNew;
            	gallery__resolvedKey = __key;
            }
        }
        return gallery;
    }

    public void setGallery(Gallery gallery) {
        synchronized (this) {
            this.gallery = gallery;
            id = gallery == null ? null : gallery.getId();
            gallery__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
